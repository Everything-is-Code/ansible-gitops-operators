---
- name: Install GitOps Operators
  hosts: localhost
  vars:
      oc_cli_url: "url_for_cli download"
      oc: "./files/binary/oc"
      thanos_ns: "open-cluster-management-observability"
      thanos_bc: "obc-open-cluster-management-observability-thanos-bc"
      access_key: "your_key"
      secret_key: "your_secret"
      noobaa_secret: "noobaa-aws-cloud-creds-secret"
      platform: ""
      storage_cass: ""
      storage_provisioner: ""
      vmware_datastore: ""
      git_repository: ""
      git_url: ""
      git_private_key: ""
      machineset_api_cluster: ""
      machineset_name: ""
      machineset_replicas: "3"
      machineset_credentials_secret: ""
      machineset_disk: ""
      machineset_kind: ""
      machineset_memory: ""
      machineset_network_name: ""
      machineset_corespersocket: ""
      machineset_cpu: ""
      machineset_cluster_name: ""


  pre_tasks:

      - name: Do Pre Task for pre requisites for playbook
        ansible.builtin.include_tasks: task/pre-tasks.yaml

  tasks:

      - name: Install Storage-Class
        redhat.openshift.k8s:
            kubeconfig: config/kube.config
            src: ztp/{{ platform }}-thin-odf.yaml
            state: present
        when: platform != ""

      - name: Get Values for machineSet
        ansible.builtin.shell:
            cmd: |
              set -o pipefail
              {{ oc }} get $(oc get machineset -n openshift-machine-api -o \
              name|grep worker|head -n 1) -n openshift-machine-api -o  \
              jsonpath='{.spec.template.spec.providerSpec.value.template}'
        register: machineset_template
        changed_when: machineset_template.rc
        when: platform != ""

      - name: Install MachineSet
        redhat.openshift.k8s:
            kubeconfig: config/kube.config
            src: ztp/machineset.yaml
            state: present
        when: platform != ""

      - name: Wait for ODF node start
        ansible.builtin.shell:
            cmd: |
              set -o pipefail
              while ! {{ oc }} get machineset/hub-infra-odf -n openshift-machine-api -o jsonpath="{.status.readyReplicas}" 2>/dev/null| grep 3 ; do \
                sleep 5
              done
        register: argocd_ready
        changed_when: argocd_ready
        when: platform != ""

      - name: Install ArgoCD
        ansible.builtin.include_tasks: task/argocd-install.yaml

      - name: Add Repo to ArgoCD
        redhat.openshift.k8s:
            kubeconfig: config/kube.config
            src: ztp/repo-secret.yaml
            state: present

      - name: Install Advance Cluster Management using ArgoCD
        redhat.openshift.k8s:
            kubeconfig: config/kube.config
            src: argocd-apps/00_acm-appset.yaml
            state: present

      - name: Wait for ACM to finish installing
        ansible.builtin.shell:
            cmd: |
              while ! {{ oc }} wait mce multiclusterengine --for=condition=available --timeout=1500s >/dev/null; do \
                sleep 5
              done
        register: acm_ready
        changed_when: acm_ready

      - name: Install the ODF Operator using ArgoCD
        redhat.openshift.k8s:
            kubeconfig: config/kube.config
            src: argocd-apps/00_odf-appset.yaml
            state: present

      - name: Wait for ODF object storage bucket to be created
        ansible.builtin.shell:
            cmd: |
              while ! {{ oc }} wait StorageSystem ocs-storagecluster-storagesystem -n openshift-storage --for=condition=available --timeout=600s; do \
                sleep 5
              done
        register: odf_ready
        changed_when: odf_ready

      - name: Wait for ODF object storage bucket to be Ready
        ansible.builtin.shell:
            cmd: |
              while ! {{ oc }} wait StorageSystem ocs-storagecluster-storagesystem -n openshift-storage --for=condition=available --timeout=600s; do \
                sleep 5
              done
        register: odf_ready
        changed_when: odf_ready

      - name: Install Observability using ArgoCD
        redhat.openshift.k8s:
            kubeconfig: config/kube.config
            src: argocd-apps/00_acm-obs.yaml
            state: present

      - name: Wait for Objectbucket for Thanos  to be Ready
        ansible.builtin.shell:
            cmd: |
              while ! {{ oc }} get objectbucket obc-open-cluster-management-observability-thanos-bc -n open-cluster-management-observability; do \
                sleep 5
              done
        register: quay_ready
        changed_when: quay_ready

      - name: Get Values for thanos object storages endpoint
        ansible.builtin.shell:
            cmd: |
              set -o pipefail
              {{ oc }} get objectbucket {{ thanos_bc }} -n open-cluster-management-observability -o json | jq -r '.spec.endpoint.bucketHost'
        register: s3_endpoint
        changed_when: s3_endpoint.rc

      - name: Get Values for thanos object storages endpoint
        ansible.builtin.shell:
            cmd: |
              set -o pipefail
              {{ oc }} get objectbucket {{ thanos_bc }} -n open-cluster-management-observability -o json | jq -r '.spec.endpoint.bucketHost'
        register: s3_endpoint
        changed_when: s3_endpoint.rc

      - name: Get Values for thanos object storage name
        ansible.builtin.shell:
            cmd: |
              set -o pipefail
              {{ oc }} get objectbucket {{ thanos_bc }} -n open-cluster-management-observability -o json | jq -r '.spec.endpoint.bucketName'
        register: s3_bucket
        changed_when: s3_bucket.rc

      - name: Get Values for thanos object access_key
        ansible.builtin.shell:
            cmd: |
              set -o pipefail
              {{ oc }} get secret thanos-bc -n {{ thanos_ns }} -o json | jq -r '.data.AWS_ACCESS_KEY_ID'
        register: access_key
        changed_when: access_key.rc

      - name: Get Values for thanos object secret_key
        ansible.builtin.shell:
            cmd: |
              set -o pipefail
              {{ oc }} get secret thanos-bc -n {{ thanos_ns }} -o json | jq -r '.data.AWS_SECRET_ACCESS_KEY'
        register: secret_key
        changed_when: secret_key.rc

      - name: Create TMP folder
        ansible.builtin.file:
            path: files/tmp
            state: directory
            mode: "0775"

      - name: Replace template for Thanos Object Storage
        ansible.builtin.template:
            src: template_thanos-object-storage.yaml.j2
            dest: files/tmp/thanos-object-storage.yaml
            mode: preserve

      - name: Create Observability additional resources
        redhat.openshift.k8s:
            kubeconfig: config/kube.config
            src: tmp/thanos-object-storage.yaml
            state: present

      - name: Wait for Observability Stack to be Ready
        ansible.builtin.shell:
            cmd: |
              while ! {{ oc }} wait MultiClusterObservability observability --for=condition=available --timeout=600s; do \
                sleep 5
              done
        register: quay_ready
        changed_when: quay_ready

      - name: Delete Thanos Object Storage Template
        ansible.builtin.file:
            path: files/tmp
            state: absent

      - name: Install the Quay Operator and registry using ArgoCD
        redhat.openshift.k8s:
            kubeconfig: config/kube.config
            src: argocd-apps/00_quay-appset.yaml
            state: present

      - name: Wait for Quay Registry to be created
        ansible.builtin.shell:
            cmd: |
              while ! {{ oc }} wait QuayRegistry quay -n registry --for=condition=available --timeout=600s; do \
                sleep 5
              done
        register: quay_ready
        changed_when: quay_ready

      - name: Wait for Quay registry to be Ready
        ansible.builtin.shell:
            cmd: |
              while ! {{ oc }} wait deployment quay-quay-app -n registry --for=condition=available --timeout=600s; do \
                sleep 5
              done
        register: quay_ready
        changed_when: quay_ready
